@model OwnBI.ViewModels.ChartViewModel


@{
    ViewBag.Title = "_chart";
}


<div class="panel panel-default">
    <div class="panel-heading" style="@((Model.HidePanel)? "display:none;" : "")">@Model.Title</div>
    <div class="panel-body" style="text-align: right;">
        <canvas id="chart_@Model.ChartID"
                width="@((Model.Width != null)? "auto" : Model.Width.ToString())"
                height="@((Model.Height!= null)? "auto" : Model.Height.ToString())"></canvas>
    </div>
</div>


<script>
    var ctx = document.getElementById("chart_@Model.ChartID");
    var myChart = new Chart(ctx, {
        type: '@Model.Type',
        data: {
            labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Categories)),
            datasets: [
                @{
                    int i = 0;
                    foreach(var values in Model.Values)
                    {
                        <text>
                        {
                            label: "@Html.Raw(Model.SeriesNames[i])",
                            data: @(Newtonsoft.Json.JsonConvert.SerializeObject(values)),
                            backgroundColor: [
                                @{
                                    if (Model.Type == "bar" || Model.Type == "line")
                                    {
                                        foreach(var vals in values)
                                        {
                                            @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.BackGroundColors[i % Model.BackGroundColors.Count]) + ",")
                                        }
                                    }
                                    else
                                    {
                                        var j = 0;
                                        foreach(var vals in values)
                                        {
                                            @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.BackGroundColors[j % Model.BackGroundColors.Count]) + ",")
                                            j++;
                                        }
                                    }

                                }
                            ],
                            borderColor: [
                                @{
                                    if (Model.Type == "bar" || Model.Type == "line")
                                    {
                                        foreach(var vals in values)
                                        {
                                            @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.BorderColors[i % Model.BorderColors.Count]) + ",")
                                        }
                                    }
                                    else
                                    {
                                        var j = 0;
                                        foreach(var vals in values)
                                        {
                                            @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.BorderColors[j % Model.BorderColors.Count]) + ",")
                                            j++;
                                        }
                                    }
                                }
                            ],
                            borderWidth: 1
                        },
                        </text>
                        i++;
                    }
                }
            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            onClick: function(e, item) {
                location.href = "/OwnBI/Doc?query=" + item[0]._model.label + ", @Request.Params["query"].ToString()"; 
            }
        }
    });
</script>
